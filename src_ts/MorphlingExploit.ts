import { MenuManager, LocalPlayer, Vector3, EntityManager, Utils, Ability, Item } from "./CrutchesSDK/Imports"

var CursorWorldVec = new Vector3()
Events.on("onUpdate", cmd => CursorWorldVec = Vector3.fromIOBuffer(cmd.vec_under_cursor))

function GetBuggedAbils(): C_DOTABaseAbility[] {
	let hero = LocalDOTAPlayer.m_hAssignedHero as C_DOTA_BaseNPC
	let spells = hero.m_hAbilities.filter(abil => abil !== undefined)
	return Entities.AllEntities.filter(ent =>
		ent instanceof C_DOTABaseAbility
		&& !(ent instanceof C_DOTA_Ability_Morphling_Waveform)
		&& !(ent instanceof C_DOTA_Item)
		&& ent.m_hOwnerEntity === hero
		&& !spells.includes(ent)
	) as C_DOTABaseAbility[]
}

function castabil(id: number) {
	if (!IsInGame() || !LocalPlayer.HeroAssigned)
		return
	let abils = GetBuggedAbils()
	if (id >= abils.length)
		return
	let abil = EntityManager.GetEntityByNative(abils[id]) as Ability
	let target = Utils.orderBy(EntityManager.GetEntitiesInRange(CursorWorldVec, 200).filter(ent => {
		switch (abil.TargetTeam[0]) {
			case DOTA_UNIT_TARGET_TEAM.DOTA_UNIT_TARGET_TEAM_FRIENDLY:
				return !ent.IsEnemy(LocalPlayer)
			case DOTA_UNIT_TARGET_TEAM.DOTA_UNIT_TARGET_TEAM_ENEMY:
				return ent.IsEnemy(LocalPlayer)
			case DOTA_UNIT_TARGET_TEAM.DOTA_UNIT_TARGET_TEAM_CUSTOM:
			case DOTA_UNIT_TARGET_TEAM.DOTA_UNIT_TARGET_TEAM_BOTH:
			default:
				return true
		}
	}), ent => ent.Distance(CursorWorldVec))[0]
	let native_target = target !== undefined ? target.m_pBaseEntity : undefined
	CursorWorldVec.toIOBuffer()

	let beh = abil.AbilityBehavior
	PrepareUnitOrders({
		OrderType: beh.includes(DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_NO_TARGET)
					? dotaunitorder_t.DOTA_UNIT_ORDER_CAST_NO_TARGET
					: beh.includes(DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_UNIT_TARGET) || beh.length === 0
						? dotaunitorder_t.DOTA_UNIT_ORDER_CAST_TARGET
						: beh.includes(DOTA_ABILITY_BEHAVIOR.DOTA_ABILITY_BEHAVIOR_POINT)
							? dotaunitorder_t.DOTA_UNIT_ORDER_CAST_POSITION
							: dotaunitorder_t.DOTA_UNIT_ORDER_CAST_NO_TARGET,
		Ability: abil.m_pBaseEntity,
		Queue: false,
		ShowEffects: true,
		Unit: LocalDOTAPlayer.m_hAssignedHero,
		Target: native_target
	})
}

const Menu = MenuManager.MenuFactory("Morphling Exploit");
const hotkey1State = Menu.AddKeybind("Hotkey 1").OnPressed(() => castabil(0));
const hotkey2State = Menu.AddKeybind("Hotkey 2").OnPressed(() => castabil(1));
const hotkey3State = Menu.AddKeybind("Hotkey 3").OnPressed(() => castabil(2));
const hotkey4State = Menu.AddKeybind("Hotkey 4").OnPressed(() => castabil(3));
const hotkey5State = Menu.AddKeybind("Hotkey 5").OnPressed(() => castabil(4));
const hotkey6State = Menu.AddKeybind("Hotkey 6").OnPressed(() => castabil(5));
const xOffset = Menu.AddSlider("X Offset", 0, 0, 10000);
const yOffset = Menu.AddSlider("Y Offset", 200, 0, 10000);
const fontSize = Menu.AddSlider("Font size", 16, 0, 100);

Events.on("onDraw", () => {
	if (!IsInGame() || LocalDOTAPlayer.m_hAssignedHero === undefined)
		return
	let abils = GetBuggedAbils()
	// loop-optimizer: KEEP
	abils.forEach((abil, i) => Renderer.Text (
		xOffset.value,
		yOffset.value + i * fontSize.value,
		`${abil.m_pAbilityData.m_pszAbilityName} ${abil.m_fCooldown.toFixed(1)}`,
		255, 255, 255, 255, "Calibri", fontSize.value
	))
})